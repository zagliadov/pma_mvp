{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from \"react\";\n//Description\n// The \"useClickOutside\" hook is used to detect when a clicks outside of a specified element.\n//Parameters\n// \"ref: Ref<T>\" - A reference to the element that should be tracked.\n// \"callback: (event: MouseEvent | TouchEvent) => void\" -A callback function that will be executed when the user clicks outside of the element.\n//Return Value\n// The hook does not return any value.\n//Example Usage\n// useClickOutside(dropdownRef, () => setIsOpen(false));\n\nexport function useClickOutside(ref, handler) {\n  _s();\n  useEffect(() => {\n    const listener = event => {\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n      handler(event);\n    };\n    document.addEventListener(\"mousedown\", listener);\n    document.addEventListener(\"touchstart\", listener);\n    return () => {\n      document.removeEventListener(\"mousedown\", listener);\n      document.removeEventListener(\"touchstart\", listener);\n    };\n  }, [ref, handler]);\n}\n_s(useClickOutside, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");","map":{"version":3,"names":["useEffect","useClickOutside","ref","handler","_s","listener","event","current","contains","target","document","addEventListener","removeEventListener"],"sources":["/app/src/hooks/useClickOutside.ts"],"sourcesContent":["import { useEffect, RefObject } from \"react\";\n\ntype AnyEvent = MouseEvent | TouchEvent;\n\n//Description\n// The \"useClickOutside\" hook is used to detect when a clicks outside of a specified element.\n//Parameters\n// \"ref: Ref<T>\" - A reference to the element that should be tracked.\n// \"callback: (event: MouseEvent | TouchEvent) => void\" -A callback function that will be executed when the user clicks outside of the element.\n//Return Value\n// The hook does not return any value.\n//Example Usage\n// useClickOutside(dropdownRef, () => setIsOpen(false));\n\nexport function useClickOutside<T extends HTMLElement = HTMLElement>(\n  ref: RefObject<T>,\n  handler: (event: AnyEvent) => void\n) {\n  useEffect(() => {\n    const listener = (event: AnyEvent) => {\n      if (!ref.current || ref.current.contains(event.target as Node)) {\n        return;\n      }\n      handler(event);\n    };\n\n    document.addEventListener(\"mousedown\", listener);\n    document.addEventListener(\"touchstart\", listener);\n\n    return () => {\n      document.removeEventListener(\"mousedown\", listener);\n      document.removeEventListener(\"touchstart\", listener);\n    };\n  }, [ref, handler]);\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAmB,OAAO;AAI5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,eAAeA,CAC7BC,GAAiB,EACjBC,OAAkC,EAClC;EAAAC,EAAA;EACAJ,SAAS,CAAC,MAAM;IACd,MAAMK,QAAQ,GAAIC,KAAe,IAAK;MACpC,IAAI,CAACJ,GAAG,CAACK,OAAO,IAAIL,GAAG,CAACK,OAAO,CAACC,QAAQ,CAACF,KAAK,CAACG,MAAM,CAAS,EAAE;QAC9D;MACF;MACAN,OAAO,CAACG,KAAK,CAAC;IAChB,CAAC;IAEDI,QAAQ,CAACC,gBAAgB,CAAC,WAAW,EAAEN,QAAQ,CAAC;IAChDK,QAAQ,CAACC,gBAAgB,CAAC,YAAY,EAAEN,QAAQ,CAAC;IAEjD,OAAO,MAAM;MACXK,QAAQ,CAACE,mBAAmB,CAAC,WAAW,EAAEP,QAAQ,CAAC;MACnDK,QAAQ,CAACE,mBAAmB,CAAC,YAAY,EAAEP,QAAQ,CAAC;IACtD,CAAC;EACH,CAAC,EAAE,CAACH,GAAG,EAAEC,OAAO,CAAC,CAAC;AACpB;AAACC,EAAA,CApBeH,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}